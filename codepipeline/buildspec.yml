version: 0.2

env:
  shell: bash
    
phases:
  install:
    on-failure: ABORT
    runtime-versions:
      php: ${PHP_VERSION}
    commands:
      - echo "Configuration start at $(date)"
      - php -m
      - php -v
      - echo "Configuration end at $(date)"
  build:
    on-failure: ABORT
    commands:
      - echo "Build start at $(date)"
      - cd ${CODEBUILD_SRC_DIR}
      - echo "${COMPOSER_AUTH}" > auth.json
      - chmod +x bin/magento
      - composer install --optimize-autoloader --prefer-dist --no-dev
      - bin/magento setup:di:compile
      - composer dump-autoload --no-dev --optimize --apcu
      - |
        bin/magento setup:static-content:deploy \
        --language=en_US \
        --area=frontend --theme=Magento/blank --theme=Magento/luma \
        --area=adminhtml --theme=Magento/backend \
        --jobs=8 \
        --force
      - echo "Build end at $(date)"
  post_build:
    on-failure: ABORT
    commands:
      - echo "Post Build start at $(date)"
      - echo "${CODEDEPLOY_APPSPEC}" > appspec.yml
      - echo "${MAGENTO_ENV}" > app/etc/env.php
      - |
        echo "
        #!/bin/bash
        # before install
        BUNDLE_DIR="/opt/codedeploy-agent/deployment-root/\${DEPLOYMENT_GROUP_ID}/\${DEPLOYMENT_ID}/deployment-archive"
        APPSPEC_FILE="\${BUNDLE_DIR}/appspec.yml"
        # Replace paths in appspec.yml
        sed -i "s/deployment_id/\${DEPLOYMENT_ID}/g" "\${APPSPEC_FILE}"
        # Symlink shared folders
        SHARED="/home/${BRAND}/shared"
        NEW_RELEASE="/home/${BRAND}/releases/\${DEPLOYMENT_ID}"
        mkdir -p \${NEW_RELEASE}/pub
        ln -nfs "\${SHARED}/var" "\${NEW_RELEASE}/var"
        ln -nfs "\${SHARED}/pub/media" "\${NEW_RELEASE}/pub/media"
        chown -h ${BRAND}:php-${BRAND} "\${NEW_RELEASE}/var"
        chown -h ${BRAND}:php-${BRAND} "\${NEW_RELEASE}/pub/media"
        " > setup.sh
      - |
        echo "
        #!/bin/bash
        # after install
        NEW_RELEASE="/home/${BRAND}/releases/\${DEPLOYMENT_ID}"
        PUBLIC_HTML="/home/${BRAND}/public_html"
        # Ensure the new release directory exists
        if [ ! -d "\${NEW_RELEASE}" ]; then
          echo "New release directory not found!"
          echo "Deployment error!"
         exit 1
        fi
        # Check if the directory is an EFS mount
        if ! df -T "\${NEW_RELEASE}/pub/media" | grep -q "efs"; then
          echo "The media directory is not an EFS mount."
          echo "Deployment error!"
         exit 1
        fi
        # Perform symlink swap to point to the new release
        ln -nfs "\${NEW_RELEASE}" "\${PUBLIC_HTML}"
        " > deploy.sh
      - |
        echo "
        #!/bin/bash
        # application start
        if [ "\${DEPLOYMENT_GROUP_ID}" == "${ADMIN_DEPLOYMENT_GROUP_ID}" ]; then
        bin/magento setup:db:status --no-ansi -n
        if [[ \$? -eq 2 ]]; then
        bin/magento setup:upgrade --keep-generated --no-ansi -n
        fi
        sudo cacheflush
        fi
        " > upgrade.sh
      - |
        echo "
        #!/bin/bash
        # validate service
        cd /home/${BRAND}/releases
        ls -dt */ | tail -n +2 | xargs rm -rf
        cd /home/${BRAND}/releases/\${DEPLOYMENT_ID}
        rm setup.sh deploy.sh upgrade.sh cleanup.sh appspec.yml
        " > cleanup.sh
      - chmod +x setup.sh deploy.sh upgrade.sh cleanup.sh
      - echo "Post Build end at $(date)"
artifacts:
    files:
      - '**/*'
    name: builds/${parameter["BRAND"]}/$(date +%Y-%m-%d)/${CODEBUILD_BUILD_NUMBER}/
